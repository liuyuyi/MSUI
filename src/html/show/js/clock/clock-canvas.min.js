!(function ($, window, document, undefined) { var Clock = function (elem, ctx, opts) { this.$element = elem, this.context = ctx, this.defaults = { hCol: "#00ff00", mCol: "#0000ff", sCol: "#ff0000", isNumCol: "#ff0000", noNumCol: "#ffff00", dCol: "red", bgCol: "#000", cloId: "" }, this.options = $.extend({}, this.defaults, opts) }; Clock.prototype = { drawCricle: function (_ctx, r, rem, bgCol) { _ctx.beginPath(); _ctx.lineWidth = 10 * rem; _ctx.arc(r, r, r - _ctx.lineWidth / 2, 0, 2 * Math.PI, false); _ctx.fillStyle = bgCol; _ctx.closePath(); _ctx.fill() }, drawBackground: function (_ctx, r, rem, isNumCol, noNumCol) { _ctx.save(); _ctx.translate(r, r); var hourNumbers = [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2]; for (var i = 0; i < 60; i++) { var rad = 2 * Math.PI / 60 * i; var x = Math.cos(rad) * (r - 16 * rem); var y = Math.sin(rad) * (r - 16 * rem); _ctx.beginPath(); if (i % 5 == 0) { _ctx.beginPath(); _ctx.strokeStyle = noNumCol; _ctx.lineWidth = 2; _ctx.moveTo(r - 10, 0); _ctx.lineTo(r - 30, 0); _ctx.stroke() } else { _ctx.beginPath(); _ctx.strokeStyle = isNumCol; _ctx.lineWidth = 2; _ctx.rotate(Math.PI / 6); _ctx.moveTo(r - 10, 0); _ctx.lineTo(r - 20, 0); _ctx.stroke() } _ctx.rotate(Math.PI / 30); _ctx.fill() } }, drawHour: function (_ctx, r, rem, hour, minute, hCol) { var radH = 2 * Math.PI / 12 * hour; var radM = 2 * Math.PI / 12 / 60 * minute; _ctx.save(); _ctx.rotate(radH + radM); _ctx.beginPath(); _ctx.lineWidth = 8; _ctx.strokeStyle = hCol; _ctx.moveTo(0, 0); _ctx.lineTo(0, -r / 2); _ctx.stroke(); _ctx.fill(); _ctx.restore() }, drawMinute: function (_ctx, r, rem, minute, mCol) { var rad = 2 * Math.PI / 60 * minute; _ctx.save(); _ctx.rotate(rad); _ctx.beginPath(); _ctx.lineWidth = 6; _ctx.strokeStyle = mCol; _ctx.moveTo(0, 0); _ctx.lineTo(r - 80, 0); _ctx.stroke(); _ctx.restore(); _ctx.fill() }, drawSecond: function (_ctx, r, rem, second, sCol) { var rad = 2 * Math.PI / 60 * second; _ctx.save(); _ctx.rotate(rad); _ctx.beginPath(); _ctx.lineWidth = 4; _ctx.strokeStyle = sCol; _ctx.moveTo(0, 0); _ctx.lineTo(r - 50, 0); _ctx.stroke(); _ctx.restore(); _ctx.fill() }, drawDot: function (_ctx, r, rem, dCol) { _ctx.beginPath(); _ctx.fillStyle = dCol; _ctx.arc(0, 0, 3 * rem, 0, 2 * Math.PI, false); _ctx.fill() }, draw: function () { var width = this.$element.width(), height = this.$element.height(), _ctx = this.context, r = width / 2, rem = width / 200, isNumCol = this.options.isNumCol, noNumCol = this.options.noNumCol, hCol = this.options.hCol, mCol = this.options.mCol, sCol = this.options.sCol, dCol = this.options.mCol; bgCol = this.options.bgCol; var date = new Date(), hour = date.getHours(), minute = date.getMinutes(), second = date.getSeconds(); _ctx.clearRect(0, 0, width, height); this.drawBackground(_ctx, r, rem, isNumCol, noNumCol); this.drawHour(_ctx, r, rem, hour, minute, hCol); this.drawMinute(_ctx, r, rem, minute, mCol); this.drawSecond(_ctx, r, rem, second, sCol); this.drawDot(_ctx, r, rem, sCol); _ctx.restore() } }; $.fn.drawClock = function (options) { var _self = this; var ctx = this.get(0).getContext("2d"); var timeOut = 0; var clock = new Clock(_self, ctx, options); clock.draw(); timeOut = setInterval(function () { clock.draw() }, 1000); timeObj["" + options.cloId + ""] = timeOut } })(jQuery, window, document);